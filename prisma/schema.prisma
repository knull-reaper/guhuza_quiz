generator client {
  provider   = "prisma-client-js"
  engineType = "library"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model QuizLevel {
  id                   Int    @id @default(autoincrement()) 
  title                String 
  number               Int    
  unlockScoreRequired  Int    @default(0) 
  users                User[] 
  quizzes              Quiz[]
}


model Milestone {
  id                   Int    @id @default(autoincrement()) 
  title                String 
  description          String 
  unlockingQuizLevel   Int 
  rewardMessage        String 
  link                 String 
  buttonCTA            String 
  users                User[] 
}


model User {
  id              Int        @id @default(autoincrement()) 
  name            String? 
  email           String?    @unique
  emailVerified   DateTime?
  image           String?
  totalScore      Int        @default(0) 
  currentStreak   Int        @default(0) 
  loginStreak     Int        @default(0) 
  lastLogin       DateTime   @updatedAt 
  quizLevelId     Int? 
  quizLevel       QuizLevel? @relation(fields: [quizLevelId], references: [id], map: "User_QuizLevel_Id_fkey")
  milestoneId     Int? 
  milestone       Milestone? @relation(fields: [milestoneId], references: [id], map: "User_Milestone_Id_fkey")
  progress        Progress? 
  playerLevelId   Int?       
  playerLevel     PlayerLevel? @relation(fields: [playerLevelId], references: [id])
  accounts        Account[]
  sessions        Session[]
  badges          UserBadge[] 
  quizAttempts    QuizAttempt[]
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  @@index([quizLevelId], map: "User_QuizLevel_Id_fkey")
  @@index([milestoneId], map: "User_Milestone_Id_fkey")
  @@index([playerLevelId])
}


model Progress {
  id              String   @id @default(cuid())
  levelReached    Int 
  percentComplete Float
  lastPlayedAt    DateTime @updatedAt
  createdAt       DateTime @default(now())
  userId          Int      @unique 
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model PlayerLevel {
  id          Int    @id @default(autoincrement())
  name        String
  unlockScore Int    @unique 
  users       User[] 
}


model Badge {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  description String
  iconUrl     String?
  users       UserBadge[] 
}


model UserBadge {
  userId     Int
  badgeId    Int
  assignedAt DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge      Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)

  @@id([userId, badgeId])
  @@index([badgeId])
}


model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model Quiz {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  quizLevelId Int 
  quizLevel   QuizLevel @relation(fields: [quizLevelId], references: [id])
  questions   Question[]
  quizAttempts QuizAttempt[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([quizLevelId])
}

model Question {
  id        Int      @id @default(autoincrement())
  text      String   @db.Text
  quizId    Int
  quiz      Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options   Option[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([quizId])
}

model Option {
  id         Int      @id @default(autoincrement())
  text       String
  isCorrect  Boolean  @default(false)
  questionId Int
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([questionId])
}

model QuizAttempt {
  id        Int      @id @default(autoincrement())
  userId    Int
  quizId    Int
  score     Int      
  completedAt DateTime @default(now()) 
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers QuizAnswer[] 

  @@unique([userId, quizId], name: "UserQuizAttemptUnique") 
  @@index([userId])
  @@index([quizId])
}

model QuizAnswer {
  id            Int      @id @default(autoincrement())
  quizAttemptId Int
  questionId    Int 
  optionId      Int      
  isCorrect     Boolean
  timeTaken     Int?     

  quizAttempt QuizAttempt @relation(fields: [quizAttemptId], references: [id], onDelete: Cascade)
  
  

  @@index([quizAttemptId])
}
